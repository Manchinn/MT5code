# -*- coding: utf-8 -*-
"""Python MT5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yeDRmpchLAHc_UcyyWwjC9tULJ5a4Tez

# Trade with Python through MetaTrader5
"""

# documentation: https://www.mql5.com/en/docs/integration/python_metatrader5

import MetaTrader5 as mt  # pip install MetaTrader5
import pandas as pd  # pip install pandas
import plotly.express as px  # pip install plotly
from datetime import datetime

# start the platform with initialize()
mt.initialize()

# login to Trade Account with login()
# make sure that trade server is enabled in MT5 client terminal

login = 10000321503
password = 'MvD!YcW1'
server = 'MetaQuotes-Demo'

mt.login(login, password, server)

# get account info
account_info = mt.account_info()
print(account_info)

# getting specific account data
login_number = account_info.login
balance = account_info.balance
equity = account_info.equity

print()
print('login: ', login_number)
print('balance: ', balance)
print('equity: ', equity)

# get number of symbols with symbols_total()
num_symbols = mt.symbols_total()

num_symbols

# get all symbols and their specifications
symbols = mt.symbols_get()
symbols

# get symbol specifications
symbol_info = mt.symbol_info("XAUUSD")._asdict()
symbol_info

# get current symbol price
symbol_price = mt.symbol_info_tick("XAUUSD")._asdict()
symbol_price

# ohlc_data
ohlc_data = pd.DataFrame(mt.copy_rates_range("XAUUSD",
                                             mt.TIMEFRAME_D1,
                                             datetime(2021, 1, 1),
                                             datetime.now()))

fig = px.line(ohlc_data, x=ohlc_data['time'], y=ohlc_data['close'])
fig.show()

ohlc_data

# requesting tick data
tick_data = pd.DataFrame(mt.copy_ticks_range("XAUUSD",
                                             datetime(2021, 10, 4),
                                             datetime.now(),
                                             mt.COPY_TICKS_ALL))

fig = px.line(tick_data, x=tick_data['time'], y=[tick_data['bid'], tick_data['ask']])
fig.show()

tick_data

# total number of orders
num_orders = mt.orders_total()
num_orders

# list of orders
orders = mt.orders_get()
orders

# total number of positions
num_positions = mt.positions_total()
num_positions

# list of positions
positions = mt.positions_get()
positions

# number of history orders
num_order_history = mt.history_orders_total(datetime(2021, 1, 1), datetime(2021, 10, 6))
num_order_history

# list of history orders
order_history = mt.history_orders_get(datetime(2021, 1, 1), datetime(2021, 10, 6))
order_history

# number of history deals
num_deal_history = mt.history_deals_total(datetime(2021, 1, 1),  datetime(2021, 10, 6))
num_deal_history

# number of history deals
deal_history = mt.history_deals_get(datetime(2021, 1, 1), datetime(2021, 10, 6))
deal_history

# send order to the market
# documentation: https://www.mql5.com/en/docs/integration/python_metatrader5/mt5ordersend_py

request = {
    "action": mt.TRADE_ACTION_DEAL,
    "symbol": "XAUUSD",
    "volume": 2.0, # FLOAT
    "type": mt.ORDER_TYPE_BUY,
    "price": mt.symbol_info_tick("XAUUSD").ask,
    "sl": 0.0, # FLOAT
    "tp": 0.0, # FLOAT
    "deviation": 20, # INTERGER
    "magic": 234000, # INTERGER
    "comment": "python script open",
    "type_time": mt.ORDER_TIME_GTC,
    "type_filling": mt.ORDER_FILLING_IOC,
}

order = mt.order_send(request)
print(order)

# close position

request = {
    "action": mt.TRADE_ACTION_DEAL,
    "symbol": "XAUUSD",
    "volume": 2.0, # FLOAT
    "type": mt.ORDER_TYPE_SELL,
    "position": 158631228, # select the position you want to close
    "price": mt.symbol_info_tick("XAUUSD").ask,
    "sl": 0.0, # FLOAT
    "tp": 0.0, # FLOAT
    "deviation": 20, # INTERGER
    "magic": 234000, # INTERGER
    "comment": "python script open",
    "type_time": mt.ORDER_TIME_GTC,
    "type_filling": mt.ORDER_FILLING_IOC,
}

order = mt.order_send(request)
print(order)

